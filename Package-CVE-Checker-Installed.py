import requests
import argparse
import json
import time
from tqdm import tqdm

# Function to check CVEs with retry logic and exponential backoff
def fetch_with_retry(url, params, headers, retries=3, delay=5):
    for attempt in range(retries):
        try:
            response = requests.get(url, params=params, headers=headers)
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 418:  # Handle rate-limiting
                print("Rate limited by API (418). Backing off...")
                time.sleep(delay * (attempt + 1))  # Exponential backoff
            else:
                print(f"Failed request with status code {response.status_code}")
        except requests.exceptions.ConnectionError as e:
            print(f"Connection error: {e}. Retrying...")
        time.sleep(delay)  # Delay before retrying
    return None  # Return None if all retries fail

# Function to check CVEs for a specific package version
def check_cves(api_key, package, version, cvss_threshold, output_file):
    # Construct the query
    query = f"affectedSoftware.name:{package} AND affectedSoftware.version:\"{version}\""
    url = "https://vulners.com/api/v3/search/lucene/"
    headers = {"X-Vulners-Api-Key": api_key}
    params = {"query": query}

    # Make the request and retry if necessary
    response_json = fetch_with_retry(url, params, headers)

    # If we have a valid response, process the CVEs
    if response_json and "data" in response_json and "search" in response_json["data"]:
        results = response_json["data"]["search"]
        cves_found = False

        with open(output_file, 'a') as f:
            for result in results:
                source = result.get("_source", {})
                title = source.get("title", "N/A")
                description = source.get("description", "No description available.")
                cvss_score = source.get("cvss", {}).get("score", 0)

                # Only include results with CVSS >= threshold
                if cvss_score >= cvss_threshold:
                    if not cves_found:
                        # Write the package analysis header once if CVEs are found
                        f.write(f"\n# Analysis for **{package}** version **{version}**\n\n")
                        cves_found = True
                    f.write(f"#### CVE: {title}\n\n")
                    f.write(f"**Description:** {description}\n\n")
                    f.write(f"**CVSS Score:** {cvss_score}\n\n---\n")

        return cves_found
    return False

# Main function
def main():
    parser = argparse.ArgumentParser(description='Check for package vulnerabilities.')
    parser.add_argument('-f', '--file', required=True, help='File containing list of packages')
    parser.add_argument('-K', '--api_key', required=True, help='Your Vulners API key')
    parser.add_argument('-S', '--CVSS', type=float, default=7.0, help='CVSS threshold, show CVEs with this score or higher (default: 7.0)')
    parser.add_argument('-o', '--output', default="results.md", help='Output file to save results (default: results.md)')

    args = parser.parse_args()

    with open(args.file, 'r') as file:
        lines = file.readlines()

    with open(args.output, 'w') as f:
        f.write("# CVE Report\n\n")

    # Use tqdm to show progress
    with tqdm(total=len(lines), desc="Processing Packages") as pbar:
        for line in lines:
            # Skip empty lines and comments
            if not line.strip() or line.strip().startswith('Listing...') or line.strip().startswith('...'):
                pbar.update(1)
                continue

            try:
                # Split the line into components
                parts = line.strip().split()
                if len(parts) >= 2:
                    package_info = parts[0]
                    version_info = parts[1]

                    # Extract package name
                    package = package_info.split('/')[0].strip()

                    # Extract version, remove comma and 'now' if present
                    version = version_info.replace(',', '').replace('now', '').strip()

                    # Now call check_cves with the package and version
                    if not check_cves(args.api_key, package, version, args.CVSS, args.output):
                        tqdm.write(f"No CVEs found matching the selected CVSS for {package} version {version}. Skipping...")
                else:
                    tqdm.write(f"Invalid line format: {line.strip()}. Skipping...")
            except Exception as e:
                print(f"Error processing line: {line.strip()}. Error: {e}")

            # Update the progress bar
            pbar.update(1)

    print(f"\nResults saved to {args.output}")

if __name__ == "__main__":
    main()
